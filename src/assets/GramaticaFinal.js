/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaFinal = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,13],$V2=[1,19],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,27],$V8=[1,28],$V9=[1,22],$Va=[1,21],$Vb=[5,8,17,28,67,68,69,70,71,72,87,90],$Vc=[1,49],$Vd=[8,84],$Ve=[1,51],$Vf=[2,73],$Vg=[1,61],$Vh=[1,60],$Vi=[1,78],$Vj=[1,70],$Vk=[1,71],$Vl=[1,72],$Vm=[1,73],$Vn=[1,74],$Vo=[1,75],$Vp=[1,76],$Vq=[1,77],$Vr=[1,79],$Vs=[1,89],$Vt=[8,60,84],$Vu=[2,63],$Vv=[1,105],$Vw=[1,106],$Vx=[1,107],$Vy=[1,108],$Vz=[1,109],$VA=[1,110],$VB=[1,111],$VC=[8,30,37,38,39,40,41,42,43,47,48,49,50,51,52,53,55,56,57,60,84],$VD=[30,60],$VE=[1,122],$VF=[1,123],$VG=[1,124],$VH=[1,125],$VI=[1,126],$VJ=[1,127],$VK=[1,128],$VL=[1,129],$VM=[1,130],$VN=[1,131],$VO=[30,60,84],$VP=[8,30,37,38,47,48,49,50,51,52,53,55,56,57,60,84],$VQ=[8,30,37,38,39,40,41,47,48,49,50,51,52,53,55,56,57,60,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"BODY":4,"EOF":5,"SUB_BODY":6,"DECLARACION":7,"salto":8,"ASIGNACION":9,"IF":10,"ELSE":11,"MIENTRAS":12,"PARA":13,"LLAMADA":14,"RETURN":15,"FUNCION":16,"tab":17,"continuar":18,"detener":19,"INCERTEZA":20,"IMPORT":21,"CICLE_BODY":22,"FUNCT_BODY":23,"continue":24,"EXPR":25,"PRIMITIVO":26,"OP_ARITMETICAS":27,"identificador":28,"openpar":29,"closepar":30,"intvalue":31,"doublevalue":32,"stringvalue":33,"charvalue":34,"truev":35,"falsev":36,"mas":37,"menos":38,"por":39,"div":40,"mod":41,"masmas":42,"menosmenos":43,"RELACIONES":44,"OP_RELACIONALES":45,"OP_LOGICAS":46,"equals":47,"menor":48,"mayor":49,"mayorigual":50,"menorigual":51,"noigual":52,"virg":53,"admi":54,"doubleand":55,"doubleor":56,"notand":57,"ARG_LIST":58,"ARGS":59,"coma":60,"SARG":61,"DECLARACION_VACIA":62,"TIPO":63,"ID_LIST":64,"ID":65,"igual":66,"intt":67,"doublet":68,"stringt":69,"booleant":70,"chart":71,"void":72,"PARAMS":73,"colon":74,"PRINCIPAL":75,"principal":76,"retorno":77,"PARAM_LIST":78,"PARAMETRO":79,"si":80,"sino":81,"para":82,"FOR_VAR":83,"semicolon":84,"OP":85,"mientras":86,"importar":87,"dot":88,"crl":89,"incerteza":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"salto",17:"tab",18:"continuar",19:"detener",23:"FUNCT_BODY",24:"continue",28:"identificador",29:"openpar",30:"closepar",31:"intvalue",32:"doublevalue",33:"stringvalue",34:"charvalue",35:"truev",36:"falsev",37:"mas",38:"menos",39:"por",40:"div",41:"mod",42:"masmas",43:"menosmenos",47:"equals",48:"menor",49:"mayor",50:"mayorigual",51:"menorigual",52:"noigual",53:"virg",54:"admi",55:"doubleand",56:"doubleor",57:"notand",60:"coma",66:"igual",67:"intt",68:"doublet",69:"stringt",70:"booleant",71:"chart",72:"void",74:"colon",76:"principal",77:"retorno",80:"si",81:"sino",82:"para",84:"semicolon",86:"mientras",87:"importar",88:"dot",89:"crl",90:"incerteza"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,3],[6,3],[6,1],[6,1],[6,1],[22,1],[22,1],[22,1],[25,1],[25,1],[25,1],[25,1],[25,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[44,1],[44,1],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[46,2],[46,3],[46,3],[46,3],[14,4],[14,5],[14,3],[58,1],[59,3],[59,1],[61,1],[61,1],[62,3],[64,3],[64,1],[65,1],[7,5],[7,4],[7,1],[9,4],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[16,6],[16,5],[16,1],[75,6],[75,5],[15,3],[15,2],[73,1],[78,3],[78,1],[79,2],[10,6],[11,3],[13,10],[83,1],[83,1],[85,1],[85,1],[12,6],[21,5],[20,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; return this.$;
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 62: case 83:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:
this.$=$$[$0-1];
break;
case 13:
this.$ = new Continuar(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2]);
break;
case 14:
this.$=new Detener(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2]);
break;
case 15: case 16: case 40: case 55: case 58: case 59: case 88: case 89:
this.$=$$[$0];
break;
case 21: case 22: case 23: case 81:
this.$=$$[$0]
break;
case 24:
this.$=new Identificador(_$[$0].first_line,_$[$0].first_column,$$[$0],"");
break;
case 25:
this.$=$$[$0-1]
break;
case 26:
this.$=new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0],Tipo.INT,"");
break;
case 27:
this.$=new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0],Tipo.DOUBLE,"");
break;
case 28:
this.$=new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0],Tipo.STRING,"");
break;
case 29:
this.$=new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0],Tipo.CHAR,"");
break;
case 30: case 31:
this.$=new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0],Tipo.BOOLEAN,"");
break;
case 32:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.MAS,"");
break;
case 33:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.MENOS,"");
break;
case 34:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.POR,"");
break;
case 35:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.DIV,"");
break;
case 36:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.MOD,"");
break;
case 37:
this.$ = new Operacion(_$[$0-1].first_line,_$[$0-1].first_column,$$[$0-1],null,Operador.INCREMENTO,"");
break;
case 38:
this.$ = new Operacion(_$[$0-1].first_line,_$[$0-1].first_column,$$[$0-1],null,Operador.DECREMENTO,"");
break;
case 39: case 63:
this.$ = $$[$0];
break;
case 41:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.EQUALS,"");
break;
case 42:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.MENOR,"");
break;
case 43:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.MAYOR,"");
break;
case 44:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.MAYORIGUAL,"");
break;
case 45:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.MENORIGUAL,"");
break;
case 46:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.NOTEQUAL,"");
break;
case 47:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.VIRG,"");
break;
case 48:
this.$ = new Operacion(_$[$0-1].first_line,_$[$0-1].first_column,$$[$0-1],null,Operador.NOT,"");
break;
case 49:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.AND,"");
break;
case 50:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.OR,"");
break;
case 51:
this.$ = new Operacion(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0],Operador.XOR,"");
break;
case 52:
this.$=new Llamada(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-3],$$[$0-1],"");
break;
case 53:
this.$=new Llamada(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],$$[$0-1],$$[$0-4]);
break;
case 54:
this.$=new Llamada(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],null,"");
break;
case 56: case 61:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 57:
this.$ = [$$[$0]];
break;
case 60:
this.$ = new Declaracion(null,null,$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2]);
break;
case 64:
this.$=new Declaracion($$[$0-2],$$[$0],$$[$0-3],null,_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-4]);
break;
case 65:
this.$=new Declaracion($$[$0-2],$$[$0],$$[$0-3],null,_$[$0-3].first_line,_$[$0-3].first_column,"");
break;
case 67:
this.$=new Asignacion(_$[$0-3].first_line,_$[$0-3].first_column,$$[$0],$$[$0-2],$$[$0-3]);
break;
case 68:
this.$ = Tipo.INT;
break;
case 69:
this.$ = Tipo.DOUBLE;
break;
case 70:
this.$ = Tipo.STRING;
break;
case 71:
this.$ = Tipo.BOOLEAN;
break;
case 72:
this.$ = Tipo.CHAR;
break;
case 73:
this.$ = Tipo.VOID;
break;
case 74:
this.$=new Funcion(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-4],$$[$0-2],$$[$0-5],"");
break;
case 75:
this.$=new Funcion(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],null,$$[$0-4],"");
break;
case 77:
this.$=new Funcion(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-4],$$[$0-2],Tipo.VOID,"");
break;
case 78:
this.$=new Funcion(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],null,Tipo.VOID,"");
break;
case 79:
this.$=new Retorno(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0],$$[$0-2]);
break;
case 80:
this.$=new Retorno(_$[$0-1].first_line,_$[$0-1].first_column,$$[$01],null);
break;
case 82:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 84:
this.$ = new Declaracion($$[$0],null,$$[$0-1],null,_$[$0-1].first_line,_$[$0-1].first_column,"");
break;
case 85:
this.$ = new If(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-2],$$[$0-5]);
break;
case 86:
this.$ = new Else(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2]);
break;
case 87:
this.$ = new For(_$[$0-9].first_line,_$[$0-9].first_column,$$[$0-6],$$[$0-4],$$[$0-2],$$[$0-9]);
break;
case 90:
this.$ = Operador.INCREMENTO;
break;
case 91:
this.$ = Operador.DECREMENTO
break;
case 92:
this.$= new While(_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-2],$$[$0-5]);
break;
case 93:
this.$ = new Import(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-3],"");
break;
case 94:
this.$=new Incerteza(_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-1],"");
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:14,21:15,28:$V2,62:18,63:17,67:$V3,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,75:20,87:$V9,90:$Va},{1:[3]},{5:[1,29],6:30,7:4,8:$V0,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:14,21:15,28:$V2,62:18,63:17,67:$V3,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,75:20,87:$V9,90:$Va},o($Vb,[2,3]),{8:[1,31]},{8:[1,32]},{8:[1,33]},{8:[1,34]},{8:[1,35]},{8:[1,36]},{8:[1,37]},{8:[1,38]},{8:[1,39]},{18:[1,40],19:[1,41],28:[1,43],63:42,67:$V3,68:$V4,69:$V5,70:$V6,71:$V7,72:$Vc,77:[1,48],80:[1,44],81:[1,45],82:[1,47],86:[1,46]},o($Vb,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),{28:[1,50]},o($Vd,[2,66]),{29:$Ve},{8:[2,76]},{32:[1,52]},{28:[1,53]},{28:[2,68]},{28:[2,69]},{28:[2,70]},{28:[2,71]},{28:[2,72]},{28:$Vf,76:[1,54]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),{8:[1,55]},{8:[1,56]},{28:[1,57],64:58,65:59},{29:$Vg,66:$Vh},{29:[1,62]},{74:[1,63]},{29:[1,64]},{29:[1,65]},{8:[2,80],14:69,17:$Vi,25:66,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{28:$Vf},{29:[1,80],66:$Vr},{14:69,17:$Vi,25:85,26:67,27:68,28:$Vj,29:$Vk,30:[1,82],31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,44:86,45:87,46:88,54:$Vs,58:81,59:83,61:84},{8:[1,90]},{88:[1,91]},{29:[1,92]},o($Vb,[2,13]),o($Vb,[2,14]),o($Vt,$Vu,{66:[1,93]}),o($Vd,[2,60],{60:[1,94]}),o($Vt,[2,62]),{14:69,17:$Vi,25:95,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:85,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,44:86,45:87,46:88,54:$Vs,58:96,59:83,61:84},{14:69,17:$Vi,25:98,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,44:97,45:87,46:88,54:$Vs},{8:[2,86]},{14:69,17:$Vi,25:98,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,44:99,45:87,46:88,54:$Vs},{7:101,9:102,17:[1,103],62:18,63:104,67:$V3,68:$V4,69:$V5,70:$V6,71:$V7,72:$Vc,83:100},{8:[2,79],37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB},o($VC,[2,21]),o($VC,[2,22]),o($VC,[2,23]),o($VC,[2,24],{29:$Ve}),{14:69,17:$Vi,25:112,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},o($VC,[2,26]),o($VC,[2,27]),o($VC,[2,28]),o($VC,[2,29]),o($VC,[2,30]),o($VC,[2,31]),{28:[1,113]},{14:69,17:$Vi,25:114,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{30:[1,116],63:119,67:$V3,68:$V4,69:$V5,70:$V6,71:$V7,72:$Vc,73:115,78:117,79:118},{30:[1,120]},o($VC,[2,54]),{30:[2,55],60:[1,121]},o($VD,[2,57]),o($VD,[2,58],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,55:$VL,56:$VM,57:$VN}),o($VD,[2,59]),o($VO,[2,39]),o($VO,[2,40]),{14:69,17:$Vi,25:132,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},o($Vb,[2,94]),{89:[1,133]},{30:[1,135],63:119,67:$V3,68:$V4,69:$V5,70:$V6,71:$V7,72:$Vc,73:134,78:117,79:118},{14:69,17:$Vi,25:136,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{28:[1,138],65:137},o($Vd,[2,67],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),{30:[1,139]},{30:[1,140]},{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,55:$VL,56:$VM,57:$VN},{30:[1,141]},{84:[1,142]},{84:[2,88]},{84:[2,89]},{28:[1,143],63:42,67:$V3,68:$V4,69:$V5,70:$V6,71:$V7,72:$Vc},{28:[1,144]},{14:69,17:$Vi,25:145,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:146,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:147,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:148,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:149,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},o($VC,[2,37]),o($VC,[2,38]),{30:[1,150],37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB},{29:$Vg},o($Vd,[2,65],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),{30:[1,151]},{74:[1,152]},{30:[2,81],60:[1,153]},o($VD,[2,83]),{28:[1,154]},o($VC,[2,52]),{14:69,17:$Vi,25:85,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,44:86,45:87,46:88,54:$Vs,61:155},{14:69,17:$Vi,25:156,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:157,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:158,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:159,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:160,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:161,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:162,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:163,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:164,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},{14:69,17:$Vi,25:165,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq},o($VO,[2,48],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),{8:[1,166]},{30:[1,167]},{74:[1,168]},o($Vd,[2,64],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($Vt,[2,61]),o($Vt,$Vu),o($VC,[2,53]),{74:[1,169]},{74:[1,170]},{14:69,17:$Vi,25:98,26:67,27:68,28:$Vj,29:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,44:171,45:87,46:88,54:$Vs},{66:$Vh},{66:$Vr},o($VP,[2,32],{39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VP,[2,33],{39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VQ,[2,34],{42:$VA,43:$VB}),o($VQ,[2,35],{42:$VA,43:$VB}),o($VQ,[2,36],{42:$VA,43:$VB}),o($VC,[2,25]),{74:[1,172]},{8:[2,75]},{63:119,67:$V3,68:$V4,69:$V5,70:$V6,71:$V7,72:$Vc,79:173},o($VD,[2,84]),o($VD,[2,56]),o($VO,[2,41],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VO,[2,42],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VO,[2,43],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VO,[2,44],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VO,[2,45],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VO,[2,46],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VO,[2,47],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VO,[2,49],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VO,[2,50],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($VO,[2,51],{37:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB}),o($Vb,[2,93]),{74:[1,174]},{8:[2,78]},{8:[2,85]},{8:[2,92]},{84:[1,175]},{8:[2,74]},o($VD,[2,82]),{8:[2,77]},{42:[1,177],43:[1,178],85:176},{30:[1,179]},{30:[2,90]},{30:[2,91]},{74:[1,180]},{8:[2,87]}],
defaultActions: {20:[2,76],23:[2,68],24:[2,69],25:[2,70],26:[2,71],27:[2,72],29:[2,1],49:[2,73],63:[2,86],101:[2,88],102:[2,89],152:[2,75],168:[2,78],169:[2,85],170:[2,92],172:[2,74],174:[2,77],177:[2,90],178:[2,91],180:[2,87]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

let Instrucciones = [];    

    const {Declaracion} = require("../Instrucciones/Declaracion.ts");
    const {Asignacion} = require("../Instrucciones/Asignacion.ts");
    const {Identificador} = require("../Instrucciones/Identificador.ts");
    const {Funcion} = require("../Instrucciones/Funcion.ts");
    const {Llamada} = require("../Instrucciones/Llamada.ts");
    const {Operacion} = require("../Instrucciones/Operacion.ts");
    const {Primitivo} = require("../Instrucciones/Primitivo.ts");//ya
    const {Tipo} = require("../Enums/Tipo.ts");
    const {Operador} = require("../Enums/Operador.ts");
    const {If} = require("../Instrucciones/If.ts");
    const {Else} = require("../Instrucciones/Else.ts");
    const {For} = require("../Instrucciones/For.ts");
    const {While} = require("../Instrucciones/While.ts");
    const {Incerteza} = require("../Instrucciones/Incerteza.ts");
    const {Import} = require("../Instrucciones/Import.ts");
    const {Retorno} = require("../Instrucciones/Retorno.ts");
    const {Continuar} = require("../Instrucciones/Continuar.ts");
    const {Detener} = require("../Instrucciones/Detener.ts");


    /* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignorar comentario*/
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/*Ignorar comentario*/
break;
case 4:return 17;
break;
case 5:return 8;
break;
case 6:/*Ignorar espacios*/
break;
case 7:return 8;
break;
case 8:return 87;
break;
case 9:return 90;
break;
case 10:return 76;
break;
case 11:return 89;
break;
case 12:return 68;
break;
case 13:return 71;
break;
case 14:return 67;
break;
case 15:return 69;
break;
case 16:return 70
break;
case 17:return 57;
break;
case 18:return 52
break;
case 19:return 47;
break;
case 20:return 51;
break;
case 21:return 50;
break;
case 22:return 55;
break;
case 23:return 56
break;
case 24:return 42;
break;
case 25:return 43;
break;
case 26:return 74;
break;
case 27:return 60;
break;
case 28:return 54;
break;
case 29:return 35;
break;
case 30:return 36;
break;
case 31:return 72;
break;
case 32:return 37;
break;
case 33:return 39;
break;
case 34:return 38;
break;
case 35:return 40;
break;
case 36:return 41;
break;
case 37:return 'pow';
break;
case 38:return 49; 
break;
case 39:return 48;
break;
case 40:return 53;
break;
case 41:return 29;
break;
case 42:return 30;
break;
case 43:return 66;
break;
case 44:return 77;
break;
case 45:return 80;
break;
case 46:return 81;
break;
case 47:return 82;
break;
case 48:return 84;
break;
case 49:return 86;
break;
case 50:return 19;
break;
case 51:return 18;
break;
case 52:return 89;
break;
case 53:return 88;
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 33; 
break;
case 55:return 32;
break;
case 56:return 31;
break;
case 57:return 28;
break;
case 58:return 34;
break;
case 59:
    console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);

break;
case 60:return 5
break;
}
},
rules: [/^(?:!!.*)/,/^(?:''')/,/^(?:''')/,/^(?:.)/,/^(?:([\t]+))/,/^(?:([\n|\r|\v]+))/,/^(?:\s+)/,/^(?:\n+)/,/^(?:Importar\b)/,/^(?:Incerteza\b)/,/^(?:Principal\b)/,/^(?:clr\b)/,/^(?:Double\b)/,/^(?:Char\b)/,/^(?:Int\b)/,/^(?:String\b)/,/^(?:Boolean\b)/,/^(?:!&)/,/^(?:!=)/,/^(?:==)/,/^(?:<=)/,/^(?:>=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\+\+)/,/^(?:--)/,/^(?::)/,/^(?:,)/,/^(?:!)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Void\b)/,/^(?:\+)/,/^(?:\*)/,/^(?:-)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:>)/,/^(?:<)/,/^(?:~)/,/^(?:\()/,/^(?:\))/,/^(?:=)/,/^(?:Retorno\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:Para\b)/,/^(?:;)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:crl\b)/,/^(?:\.)/,/^(?:"[^\"]*")/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/,/^(?:('((([\'\"\\bf]))|([^\'\\]))'))/,/^(?:.)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaFinal;
exports.Parser = GramaticaFinal.Parser;
exports.parse = function () { return GramaticaFinal.parse.apply(GramaticaFinal, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}